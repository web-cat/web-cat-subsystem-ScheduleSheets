/*==========================================================================*\
 |  _SheetEntry.java
 |*-------------------------------------------------------------------------*|
 |  Created by eogenerator
 |  DO NOT EDIT.  Make changes to SheetEntry.java instead.
 |*-------------------------------------------------------------------------*|
 |  Copyright (C) 2006-2012 Virginia Tech
 |
 |  This file is part of Web-CAT.
 |
 |  Web-CAT is free software; you can redistribute it and/or modify
 |  it under the terms of the GNU Affero General Public License as published
 |  by the Free Software Foundation; either version 3 of the License, or
 |  (at your option) any later version.
 |
 |  Web-CAT is distributed in the hope that it will be useful,
 |  but WITHOUT ANY WARRANTY; without even the implied warranty of
 |  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 |  GNU General Public License for more details.
 |
 |  You should have received a copy of the GNU Affero General Public License
 |  along with Web-CAT; if not, see <http://www.gnu.org/licenses/>.
\*==========================================================================*/

package org.webcat.schedulesheets;

import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;
import er.extensions.eof.ERXEOControlUtilities;
import er.extensions.eof.ERXKey;
import org.apache.log4j.Logger;
import org.webcat.core.EOBasedKeyGenerator;
import org.webcat.woextensions.WCFetchSpecification;

// -------------------------------------------------------------------------
/**
 * An automatically generated EOGenericRecord subclass.  DO NOT EDIT.
 * To change, use EOModeler, or make additions in
 * SheetEntry.java.
 *
 * @author Generated by eogenerator
 * @version version suppressed to control auto-generation
 */
public abstract class _SheetEntry
    extends org.webcat.core.EOBase
{
    //~ Constructors ..........................................................

    // ----------------------------------------------------------
    /**
     * Creates a new _SheetEntry object.
     */
    public _SheetEntry()
    {
        super();
    }


    // ----------------------------------------------------------
    /**
     * A static factory method for creating a new
     * SheetEntry object given required
     * attributes and relationships.
     * @param editingContext The context in which the new object will be
     * inserted
     * @param isCompleteValue
     * @param previousWasCompleteValue
     * @return The newly created object
     */
    public static SheetEntry create(
        EOEditingContext editingContext,
        boolean isCompleteValue,
        boolean previousWasCompleteValue
        )
    {
        SheetEntry eoObject = (SheetEntry)
            EOUtilities.createAndInsertInstance(
                editingContext,
                _SheetEntry.ENTITY_NAME);
        eoObject.setIsComplete(isCompleteValue);
        eoObject.setPreviousWasComplete(previousWasCompleteValue);
        return eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Get a local instance of the given object in another editing context.
     * @param editingContext The target editing context
     * @param eo The object to import
     * @return An instance of the given object in the target editing context
     */
    public static SheetEntry localInstance(
        EOEditingContext editingContext, SheetEntry eo)
    {
        return (eo == null)
            ? null
            : (SheetEntry)EOUtilities.localInstanceOfObject(
                editingContext, eo);
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static SheetEntry forId(
        EOEditingContext ec, int id)
    {
        SheetEntry obj = null;
        if (id > 0)
        {
            NSArray<SheetEntry> objects =
                objectsMatchingValues(ec, "id", new Integer(id));
            if (objects != null && objects.count() > 0)
            {
                obj = objects.objectAtIndex(0);
            }
        }
        return obj;
    }


    // ----------------------------------------------------------
    /**
     * Look up an object by id number.  Assumes the editing
     * context is appropriately locked.
     * @param ec The editing context to use
     * @param id The id to look up
     * @return The object, or null if no such id exists
     */
    public static SheetEntry forId(
        EOEditingContext ec, String id)
    {
        return forId(ec, er.extensions.foundation.ERXValueUtilities.intValue(id));
    }


    //~ Constants (for key names) .............................................

    // Attributes ---
    public static final String ACTIVITY_KEY = "activity";
    public static final ERXKey<Integer> activity =
        new ERXKey<Integer>(ACTIVITY_KEY);
    public static final String IS_COMPLETE_KEY = "isComplete";
    public static final ERXKey<Integer> isComplete =
        new ERXKey<Integer>(IS_COMPLETE_KEY);
    public static final String NEW_DEADLINE_KEY = "newDeadline";
    public static final ERXKey<NSTimestamp> newDeadline =
        new ERXKey<NSTimestamp>(NEW_DEADLINE_KEY);
    public static final String NEW_ESTIMATED_REMAINING_KEY = "newEstimatedRemaining";
    public static final ERXKey<Double> newEstimatedRemaining =
        new ERXKey<Double>(NEW_ESTIMATED_REMAINING_KEY);
    public static final String NEW_TIME_INVESTED_KEY = "newTimeInvested";
    public static final ERXKey<Double> newTimeInvested =
        new ERXKey<Double>(NEW_TIME_INVESTED_KEY);
    public static final String PREVIOUS_DEADLINE_KEY = "previousDeadline";
    public static final ERXKey<NSTimestamp> previousDeadline =
        new ERXKey<NSTimestamp>(PREVIOUS_DEADLINE_KEY);
    public static final String PREVIOUS_ESTIMATED_REMAINING_KEY = "previousEstimatedRemaining";
    public static final ERXKey<Double> previousEstimatedRemaining =
        new ERXKey<Double>(PREVIOUS_ESTIMATED_REMAINING_KEY);
    public static final String PREVIOUS_ESTIMATED_TOTAL_KEY = "previousEstimatedTotal";
    public static final ERXKey<Double> previousEstimatedTotal =
        new ERXKey<Double>(PREVIOUS_ESTIMATED_TOTAL_KEY);
    public static final String PREVIOUS_TIME_INVESTED_TOTAL_KEY = "previousTimeInvestedTotal";
    public static final ERXKey<Double> previousTimeInvestedTotal =
        new ERXKey<Double>(PREVIOUS_TIME_INVESTED_TOTAL_KEY);
    public static final String PREVIOUS_WAS_COMPLETE_KEY = "previousWasComplete";
    public static final ERXKey<Integer> previousWasComplete =
        new ERXKey<Integer>(PREVIOUS_WAS_COMPLETE_KEY);
    // To-one relationships ---
    public static final String COMPONENT_FEATURE_KEY = "componentFeature";
    public static final ERXKey<org.webcat.schedulesheets.ComponentFeature> componentFeature =
        new ERXKey<org.webcat.schedulesheets.ComponentFeature>(COMPONENT_FEATURE_KEY);
    // To-many relationships ---
    public static final String FEEDBACK_ITEMS_KEY = "feedbackItems";
    public static final ERXKey<org.webcat.schedulesheets.SheetFeedbackItem> feedbackItems =
        new ERXKey<org.webcat.schedulesheets.SheetFeedbackItem>(FEEDBACK_ITEMS_KEY);
    public static final String RESPONSIBLE_KEY = "responsible";
    public static final ERXKey<org.webcat.core.User> responsible =
        new ERXKey<org.webcat.core.User>(RESPONSIBLE_KEY);
    public static final String WORKERS_KEY = "workers";
    public static final ERXKey<org.webcat.core.User> workers =
        new ERXKey<org.webcat.core.User>(WORKERS_KEY);
    // Fetch specifications ---
    public static final String ENTITY_NAME = "SheetEntry";

    public transient final EOBasedKeyGenerator generateKey =
        new EOBasedKeyGenerator(this);


    //~ Methods ...............................................................

    // ----------------------------------------------------------
    /**
     * Get a local instance of this object in another editing context.
     * @param editingContext The target editing context
     * @return An instance of this object in the target editing context
     */
    public SheetEntry localInstance(EOEditingContext editingContext)
    {
        return (SheetEntry)EOUtilities.localInstanceOfObject(
            editingContext, this);
    }


    // ----------------------------------------------------------
    /**
     * Get a list of changes between this object's current state and the
     * last committed version.
     * @return a dictionary of the changes that have not yet been committed
     */
    @SuppressWarnings("unchecked")
    public NSDictionary<String, Object> changedProperties()
    {
        return changesFromSnapshot(
            editingContext().committedSnapshotForObject(this));
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>id</code> value.
     * @return the value of the attribute
     */
    public Number id()
    {
        try
        {
            return (Number)EOUtilities.primaryKeyForObject(
                editingContext() , this).objectForKey("id");
        }
        catch (Exception e)
        {
            return er.extensions.eof.ERXConstant.ZeroInteger;
        }
    }

    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>activity</code> value.
     * @return the value of the attribute
     */
    public byte activity()
    {
        Integer returnValue =
            (Integer)storedValueForKey( "activity" );
        return ( returnValue == null )
            ? 0
            : returnValue.byteValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>activity</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setActivity( byte value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setActivity("
                + value + "): was " + activity() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value );
            setActivityRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>activity</code> value.
     * @return the value of the attribute
     */
    public Integer activityRaw()
    {
        return (Integer)storedValueForKey( "activity" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>activity</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setActivityRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setActivityRaw("
                + value + "): was " + activityRaw() );
        }
        takeStoredValueForKey( value, "activity" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isComplete</code> value.
     * @return the value of the attribute
     */
    public boolean isComplete()
    {
        Integer returnValue =
            (Integer)storedValueForKey( "isComplete" );
        return ( returnValue == null )
            ? false
            : ( returnValue.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isComplete</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsComplete( boolean value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setIsComplete("
                + value + "): was " + isComplete() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value ? 1 : 0 );
            setIsCompleteRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>isComplete</code> value.
     * @return the value of the attribute
     */
    public Integer isCompleteRaw()
    {
        return (Integer)storedValueForKey( "isComplete" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>isComplete</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setIsCompleteRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setIsCompleteRaw("
                + value + "): was " + isCompleteRaw() );
        }
        takeStoredValueForKey( value, "isComplete" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>newDeadline</code> value.
     * @return the value of the attribute
     */
    public NSTimestamp newDeadline()
    {
        return (NSTimestamp)storedValueForKey( "newDeadline" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>newDeadline</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setNewDeadline( NSTimestamp value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setNewDeadline("
                + value + "): was " + newDeadline() );
        }
        takeStoredValueForKey( value, "newDeadline" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>newEstimatedRemaining</code> value.
     * @return the value of the attribute
     */
    public double newEstimatedRemaining()
    {
        Double returnValue =
            (Double)storedValueForKey( "newEstimatedRemaining" );
        return ( returnValue == null )
            ? 0.0
            : returnValue.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>newEstimatedRemaining</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setNewEstimatedRemaining( double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setNewEstimatedRemaining("
                + value + "): was " + newEstimatedRemaining() );
        }
        Double actual =
            new Double( value );
            setNewEstimatedRemainingRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>newEstimatedRemaining</code> value.
     * @return the value of the attribute
     */
    public Double newEstimatedRemainingRaw()
    {
        return (Double)storedValueForKey( "newEstimatedRemaining" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>newEstimatedRemaining</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setNewEstimatedRemainingRaw( Double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setNewEstimatedRemainingRaw("
                + value + "): was " + newEstimatedRemainingRaw() );
        }
        takeStoredValueForKey( value, "newEstimatedRemaining" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>newTimeInvested</code> value.
     * @return the value of the attribute
     */
    public double newTimeInvested()
    {
        Double returnValue =
            (Double)storedValueForKey( "newTimeInvested" );
        return ( returnValue == null )
            ? 0.0
            : returnValue.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>newTimeInvested</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setNewTimeInvested( double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setNewTimeInvested("
                + value + "): was " + newTimeInvested() );
        }
        Double actual =
            new Double( value );
            setNewTimeInvestedRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>newTimeInvested</code> value.
     * @return the value of the attribute
     */
    public Double newTimeInvestedRaw()
    {
        return (Double)storedValueForKey( "newTimeInvested" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>newTimeInvested</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setNewTimeInvestedRaw( Double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setNewTimeInvestedRaw("
                + value + "): was " + newTimeInvestedRaw() );
        }
        takeStoredValueForKey( value, "newTimeInvested" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>previousDeadline</code> value.
     * @return the value of the attribute
     */
    public NSTimestamp previousDeadline()
    {
        return (NSTimestamp)storedValueForKey( "previousDeadline" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>previousDeadline</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPreviousDeadline( NSTimestamp value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPreviousDeadline("
                + value + "): was " + previousDeadline() );
        }
        takeStoredValueForKey( value, "previousDeadline" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>previousEstimatedRemaining</code> value.
     * @return the value of the attribute
     */
    public double previousEstimatedRemaining()
    {
        Double returnValue =
            (Double)storedValueForKey( "previousEstimatedRemaining" );
        return ( returnValue == null )
            ? 0.0
            : returnValue.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>previousEstimatedRemaining</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPreviousEstimatedRemaining( double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPreviousEstimatedRemaining("
                + value + "): was " + previousEstimatedRemaining() );
        }
        Double actual =
            new Double( value );
            setPreviousEstimatedRemainingRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>previousEstimatedRemaining</code> value.
     * @return the value of the attribute
     */
    public Double previousEstimatedRemainingRaw()
    {
        return (Double)storedValueForKey( "previousEstimatedRemaining" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>previousEstimatedRemaining</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPreviousEstimatedRemainingRaw( Double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPreviousEstimatedRemainingRaw("
                + value + "): was " + previousEstimatedRemainingRaw() );
        }
        takeStoredValueForKey( value, "previousEstimatedRemaining" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>previousEstimatedTotal</code> value.
     * @return the value of the attribute
     */
    public double previousEstimatedTotal()
    {
        Double returnValue =
            (Double)storedValueForKey( "previousEstimatedTotal" );
        return ( returnValue == null )
            ? 0.0
            : returnValue.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>previousEstimatedTotal</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPreviousEstimatedTotal( double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPreviousEstimatedTotal("
                + value + "): was " + previousEstimatedTotal() );
        }
        Double actual =
            new Double( value );
            setPreviousEstimatedTotalRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>previousEstimatedTotal</code> value.
     * @return the value of the attribute
     */
    public Double previousEstimatedTotalRaw()
    {
        return (Double)storedValueForKey( "previousEstimatedTotal" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>previousEstimatedTotal</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPreviousEstimatedTotalRaw( Double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPreviousEstimatedTotalRaw("
                + value + "): was " + previousEstimatedTotalRaw() );
        }
        takeStoredValueForKey( value, "previousEstimatedTotal" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>previousTimeInvestedTotal</code> value.
     * @return the value of the attribute
     */
    public double previousTimeInvestedTotal()
    {
        Double returnValue =
            (Double)storedValueForKey( "previousTimeInvestedTotal" );
        return ( returnValue == null )
            ? 0.0
            : returnValue.doubleValue();
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>previousTimeInvestedTotal</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPreviousTimeInvestedTotal( double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPreviousTimeInvestedTotal("
                + value + "): was " + previousTimeInvestedTotal() );
        }
        Double actual =
            new Double( value );
            setPreviousTimeInvestedTotalRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>previousTimeInvestedTotal</code> value.
     * @return the value of the attribute
     */
    public Double previousTimeInvestedTotalRaw()
    {
        return (Double)storedValueForKey( "previousTimeInvestedTotal" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>previousTimeInvestedTotal</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPreviousTimeInvestedTotalRaw( Double value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPreviousTimeInvestedTotalRaw("
                + value + "): was " + previousTimeInvestedTotalRaw() );
        }
        takeStoredValueForKey( value, "previousTimeInvestedTotal" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>previousWasComplete</code> value.
     * @return the value of the attribute
     */
    public boolean previousWasComplete()
    {
        Integer returnValue =
            (Integer)storedValueForKey( "previousWasComplete" );
        return ( returnValue == null )
            ? false
            : ( returnValue.intValue() > 0 );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>previousWasComplete</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPreviousWasComplete( boolean value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPreviousWasComplete("
                + value + "): was " + previousWasComplete() );
        }
        Integer actual =
            er.extensions.eof.ERXConstant.integerForInt( value ? 1 : 0 );
            setPreviousWasCompleteRaw( actual );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve this object's <code>previousWasComplete</code> value.
     * @return the value of the attribute
     */
    public Integer previousWasCompleteRaw()
    {
        return (Integer)storedValueForKey( "previousWasComplete" );
    }


    // ----------------------------------------------------------
    /**
     * Change the value of this object's <code>previousWasComplete</code>
     * property.
     *
     * @param value The new value for this property
     */
    public void setPreviousWasCompleteRaw( Integer value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setPreviousWasCompleteRaw("
                + value + "): was " + previousWasCompleteRaw() );
        }
        takeStoredValueForKey( value, "previousWasComplete" );
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entity pointed to by the <code>componentFeature</code>
     * relationship.
     * @return the entity in the relationship
     */
    public org.webcat.schedulesheets.ComponentFeature componentFeature()
    {
        return (org.webcat.schedulesheets.ComponentFeature)storedValueForKey( "componentFeature" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>componentFeature</code>
     * relationship (DO NOT USE--instead, use
     * <code>setComponentFeatureRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void setComponentFeature( org.webcat.schedulesheets.ComponentFeature value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setComponentFeature("
                + value + "): was " + componentFeature() );
        }
        takeStoredValueForKey( value, "componentFeature" );
    }


    // ----------------------------------------------------------
    /**
     * Set the entity pointed to by the <code>componentFeature</code>
     * relationship.  This method is a type-safe version of
     * <code>addObjectToBothSidesOfRelationshipWithKey()</code>.
     *
     * @param value The new entity to relate to
     */
    public void setComponentFeatureRelationship(
        org.webcat.schedulesheets.ComponentFeature value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setComponentFeatureRelationship("
                + value + "): was " + componentFeature() );
        }
        if ( value == null )
        {
            org.webcat.schedulesheets.ComponentFeature object = componentFeature();
            if ( object != null )
                removeObjectFromBothSidesOfRelationshipWithKey( object, "componentFeature" );
        }
        else
        {
            addObjectToBothSidesOfRelationshipWithKey( value, "componentFeature" );
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>feedbackItems</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<org.webcat.schedulesheets.SheetFeedbackItem> feedbackItems()
    {
        return (NSArray)storedValueForKey( "feedbackItems" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>feedbackItems</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setFeedbackItems( NSMutableArray<org.webcat.schedulesheets.SheetFeedbackItem>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setFeedbackItems("
                + value + "): was " + feedbackItems() );
        }
        takeStoredValueForKey( value, "feedbackItems" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>feedbackItems</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToFeedbackItemsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToFeedbackItems( org.webcat.schedulesheets.SheetFeedbackItem value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToFeedbackItems("
                + value + "): was " + feedbackItems() );
        }
        NSMutableArray<org.webcat.schedulesheets.SheetFeedbackItem> array =
            (NSMutableArray<org.webcat.schedulesheets.SheetFeedbackItem>)feedbackItems();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>feedbackItems</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromFeedbackItemsRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromFeedbackItems( org.webcat.schedulesheets.SheetFeedbackItem value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromFeedbackItems("
                + value + "): was " + feedbackItems() );
        }
        NSMutableArray<org.webcat.schedulesheets.SheetFeedbackItem> array =
            (NSMutableArray<org.webcat.schedulesheets.SheetFeedbackItem>)feedbackItems();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>feedbackItems</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToFeedbackItemsRelationship( org.webcat.schedulesheets.SheetFeedbackItem value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToFeedbackItemsRelationship("
                + value + "): was " + feedbackItems() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "feedbackItems" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>feedbackItems</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromFeedbackItemsRelationship( org.webcat.schedulesheets.SheetFeedbackItem value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromFeedbackItemsRelationship("
                + value + "): was " + feedbackItems() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "feedbackItems" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>feedbackItems</code> relationship.
     *
     * @return The new entity
     */
    public org.webcat.schedulesheets.SheetFeedbackItem createFeedbackItemsRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createFeedbackItemsRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "SheetFeedbackItem" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "feedbackItems" );
        return (org.webcat.schedulesheets.SheetFeedbackItem)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>feedbackItems</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteFeedbackItemsRelationship( org.webcat.schedulesheets.SheetFeedbackItem value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteFeedbackItemsRelationship("
                + value + "): was " + feedbackItems() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "feedbackItems" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>feedbackItems</code> relationship.
     */
    public void deleteAllFeedbackItemsRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllFeedbackItemsRelationships(): was "
                + feedbackItems() );
        }
        for (org.webcat.schedulesheets.SheetFeedbackItem object : feedbackItems())
        {
            deleteFeedbackItemsRelationship(object);
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>responsible</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<org.webcat.core.User> responsible()
    {
        return (NSArray)storedValueForKey( "responsible" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>responsible</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setResponsible( NSMutableArray<org.webcat.core.User>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setResponsible("
                + value + "): was " + responsible() );
        }
        takeStoredValueForKey( value, "responsible" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>responsible</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToResponsibleRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToResponsible( org.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToResponsible("
                + value + "): was " + responsible() );
        }
        NSMutableArray<org.webcat.core.User> array =
            (NSMutableArray<org.webcat.core.User>)responsible();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>responsible</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromResponsibleRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromResponsible( org.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromResponsible("
                + value + "): was " + responsible() );
        }
        NSMutableArray<org.webcat.core.User> array =
            (NSMutableArray<org.webcat.core.User>)responsible();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>responsible</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToResponsibleRelationship( org.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToResponsibleRelationship("
                + value + "): was " + responsible() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "responsible" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>responsible</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromResponsibleRelationship( org.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromResponsibleRelationship("
                + value + "): was " + responsible() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "responsible" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>responsible</code> relationship.
     *
     * @return The new entity
     */
    public org.webcat.core.User createResponsibleRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createResponsibleRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "User" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "responsible" );
        return (org.webcat.core.User)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>responsible</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteResponsibleRelationship( org.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteResponsibleRelationship("
                + value + "): was " + responsible() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "responsible" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>responsible</code> relationship.
     */
    public void deleteAllResponsibleRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllResponsibleRelationships(): was "
                + responsible() );
        }
        for (org.webcat.core.User object : responsible())
        {
            deleteResponsibleRelationship(object);
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the entities pointed to by the <code>workers</code>
     * relationship.
     * @return an NSArray of the entities in the relationship
     */
    @SuppressWarnings("unchecked")
    public NSArray<org.webcat.core.User> workers()
    {
        return (NSArray)storedValueForKey( "workers" );
    }


    // ----------------------------------------------------------
    /**
     * Replace the list of entities pointed to by the
     * <code>workers</code> relationship.
     *
     * @param value The new set of entities to relate to
     */
    public void setWorkers( NSMutableArray<org.webcat.core.User>  value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "setWorkers("
                + value + "): was " + workers() );
        }
        takeStoredValueForKey( value, "workers" );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>workers</code>
     * relationship (DO NOT USE--instead, use
     * <code>addToWorkersRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The new entity to relate to
     */
    public void addToWorkers( org.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToWorkers("
                + value + "): was " + workers() );
        }
        NSMutableArray<org.webcat.core.User> array =
            (NSMutableArray<org.webcat.core.User>)workers();
        willChange();
        array.addObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>workers</code>
     * relationship (DO NOT USE--instead, use
     * <code>removeFromWorkersRelationship()</code>.
     * This method is provided for WebObjects use.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromWorkers( org.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "RemoveFromWorkers("
                + value + "): was " + workers() );
        }
        NSMutableArray<org.webcat.core.User> array =
            (NSMutableArray<org.webcat.core.User>)workers();
        willChange();
        array.removeObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Add a new entity to the <code>workers</code>
     * relationship.
     *
     * @param value The new entity to relate to
     */
    public void addToWorkersRelationship( org.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "addToWorkersRelationship("
                + value + "): was " + workers() );
        }
        addObjectToBothSidesOfRelationshipWithKey(
            value, "workers" );
    }


    // ----------------------------------------------------------
    /**
     * Remove a specific entity from the <code>workers</code>
     * relationship.
     *
     * @param value The entity to remove from the relationship
     */
    public void removeFromWorkersRelationship( org.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "removeFromWorkersRelationship("
                + value + "): was " + workers() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "workers" );
    }


    // ----------------------------------------------------------
    /**
     * Create a brand new object that is a member of the
     * <code>workers</code> relationship.
     *
     * @return The new entity
     */
    public org.webcat.core.User createWorkersRelationship()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "createWorkersRelationship()" );
        }
        EOClassDescription eoClassDesc = EOClassDescription
            .classDescriptionForEntityName( "User" );
        EOEnterpriseObject eoObject = eoClassDesc
            .createInstanceWithEditingContext( editingContext(), null );
        editingContext().insertObject( eoObject );
        addObjectToBothSidesOfRelationshipWithKey(
            eoObject, "workers" );
        return (org.webcat.core.User)eoObject;
    }


    // ----------------------------------------------------------
    /**
     * Remove and then delete a specific entity that is a member of the
     * <code>workers</code> relationship.
     *
     * @param value The entity to remove from the relationship and then delete
     */
    public void deleteWorkersRelationship( org.webcat.core.User value )
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteWorkersRelationship("
                + value + "): was " + workers() );
        }
        removeObjectFromBothSidesOfRelationshipWithKey(
            value, "workers" );
        editingContext().deleteObject( value );
    }


    // ----------------------------------------------------------
    /**
     * Remove (and then delete, if owned) all entities that are members of the
     * <code>workers</code> relationship.
     */
    public void deleteAllWorkersRelationships()
    {
        if (log.isDebugEnabled())
        {
            log.debug( "deleteAllWorkersRelationships(): was "
                + workers() );
        }
        for (org.webcat.core.User object : workers())
        {
            deleteWorkersRelationship(object);
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a fetch specification.
     *
     * @param context The editing context to use
     * @param fspec The fetch specification to use
     *
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<SheetEntry> objectsWithFetchSpecification(
        EOEditingContext context,
        EOFetchSpecification fspec)
    {
        return context.objectsWithFetchSpecification(fspec);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve all objects of this type.
     *
     * @param context The editing context to use
     *
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<SheetEntry> allObjects(
        EOEditingContext context)
    {
        return objectsMatchingQualifier(context, null, null);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a qualifier.
     *
     * @param context The editing context to use
     * @param qualifier The qualifier to use
     *
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<SheetEntry> objectsMatchingQualifier(
        EOEditingContext context,
        EOQualifier qualifier)
    {
        return objectsMatchingQualifier(context, qualifier, null);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a qualifier and sort orderings.
     *
     * @param context The editing context to use
     * @param qualifier The qualifier to use
     * @param sortOrderings The sort orderings to use
     *
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<SheetEntry> objectsMatchingQualifier(
        EOEditingContext context,
        EOQualifier qualifier,
        NSArray<EOSortOrdering> sortOrderings)
    {
        @SuppressWarnings("unchecked")
        EOFetchSpecification fspec = new WCFetchSpecification(
                ENTITY_NAME, qualifier, sortOrderings);
        fspec.setUsesDistinct(true);
        return objectsWithFetchSpecification(context, fspec);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the first object that matches a qualifier, when
     * sorted with the specified sort orderings.
     *
     * @param context The editing context to use
     * @param qualifier The qualifier to use
     * @param sortOrderings the sort orderings
     *
     * @return the first entity that was retrieved, or null if there was none
     */
    public static SheetEntry firstObjectMatchingQualifier(
        EOEditingContext context,
        EOQualifier qualifier,
        NSArray<EOSortOrdering> sortOrderings)
    {
        NSArray<SheetEntry> objects =
            objectsMatchingQualifier(context, qualifier, sortOrderings);
        return (objects.size() > 0)
            ? objects.get(0)
            : null;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve a single object using a list of keys and values to match.
     *
     * @param context The editing context to use
     * @param qualifier The qualifier to use
     *
     * @return the single entity that was retrieved
     *
     * @throws EOUtilities.MoreThanOneException
     *     if there is more than one matching object
     */
    public static SheetEntry uniqueObjectMatchingQualifier(
        EOEditingContext context,
        EOQualifier qualifier) throws EOUtilities.MoreThanOneException
    {
        NSArray<SheetEntry> objects =
            objectsMatchingQualifier(context, qualifier);
        if (objects.size() > 1)
        {
            String msg = "fetching SheetEntry";
            try
            {
                if (qualifier != null)
                {
                    msg += " where " + qualifier;
                }
                msg += ", result = " + objects;
            }
            catch (Exception e)
            {
                log.error("Exception building MoreThanOneException message, "
                    + "contents so far: " + msg, e);
            }
            throw new EOUtilities.MoreThanOneException(msg);
        }
        return (objects.size() > 0)
            ? objects.get(0)
            : null;
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a list of keys and values to match.
     *
     * @param context The editing context to use
     * @param keysAndValues a list of keys and values to match, alternating
     *     "key", "value", "key", "value"...
     *
     * @return an NSArray of the entities retrieved
     */
    public static NSArray<SheetEntry> objectsMatchingValues(
        EOEditingContext context,
        Object... keysAndValues)
    {
        if (keysAndValues.length % 2 != 0)
        {
            throw new IllegalArgumentException("There should a value "
                + "corresponding to every key that was passed. Args = "
                + java.util.Arrays.toString(keysAndValues));
        }

        NSMutableDictionary<String, Object> valueDictionary =
            new NSMutableDictionary<String, Object>();

        for (int i = 0; i < keysAndValues.length; i += 2)
        {
            Object key = keysAndValues[i];
            Object value = keysAndValues[i + 1];

            if (key == null)
            {
                throw new IllegalArgumentException(
                    "Found null where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }
            else if (!(key instanceof String))
            {
                throw new IllegalArgumentException(
                    "Found a " + key.getClass().getName() + " [" + key + "]"
                    + " where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }

            valueDictionary.setObjectForKey(value, key);
        }

        return objectsMatchingValues(context, valueDictionary);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve objects using a dictionary of keys and values to match.
     *
     * @param context The editing context to use
     * @param keysAndValues a dictionary of keys and values to match
     *
     * @return an NSArray of the entities retrieved
     */
    @SuppressWarnings("unchecked")
    public static NSArray<SheetEntry> objectsMatchingValues(
        EOEditingContext context,
        NSDictionary<String, Object> keysAndValues)
    {
        return EOUtilities.objectsMatchingValues(context, ENTITY_NAME,
            keysAndValues);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the first object that matches a set of keys and values, when
     * sorted with the specified sort orderings.
     *
     * @param context The editing context to use
     * @param sortOrderings the sort orderings
     * @param keysAndValues a list of keys and values to match, alternating
     *     "key", "value", "key", "value"...
     *
     * @return the first entity that was retrieved, or null if there was none
     */
    public static SheetEntry firstObjectMatchingValues(
        EOEditingContext context,
        NSArray<EOSortOrdering> sortOrderings,
        Object... keysAndValues)
    {
        if (keysAndValues.length % 2 != 0)
        {
            throw new IllegalArgumentException("There should a value "
                + "corresponding to every key that was passed. Args = "
                + java.util.Arrays.toString(keysAndValues));
        }

        NSMutableDictionary<String, Object> valueDictionary =
            new NSMutableDictionary<String, Object>();

        for (int i = 0; i < keysAndValues.length; i += 2)
        {
            Object key = keysAndValues[i];
            Object value = keysAndValues[i + 1];

            if (key == null)
            {
                throw new IllegalArgumentException(
                    "Found null where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }
            else if (!(key instanceof String))
            {
                throw new IllegalArgumentException(
                    "Found a " + key.getClass().getName() + " [" + key + "]"
                    + " where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }

            valueDictionary.setObjectForKey(value, key);
        }

        return firstObjectMatchingValues(
            context, sortOrderings, valueDictionary);
    }


    // ----------------------------------------------------------
    /**
     * Retrieves the first object that matches a set of keys and values, when
     * sorted with the specified sort orderings.
     *
     * @param context The editing context to use
     * @param sortOrderings the sort orderings
     * @param keysAndValues a dictionary of keys and values to match
     *
     * @return the first entity that was retrieved, or null if there was none
     */
    public static SheetEntry firstObjectMatchingValues(
        EOEditingContext context,
        NSArray<EOSortOrdering> sortOrderings,
        NSDictionary<String, Object> keysAndValues)
    {
        @SuppressWarnings("unchecked")
        EOFetchSpecification fspec = new WCFetchSpecification(
                ENTITY_NAME,
                EOQualifier.qualifierToMatchAllValues(keysAndValues),
                sortOrderings);
        fspec.setFetchLimit(1);

        NSArray<SheetEntry> objects =
            objectsWithFetchSpecification( context, fspec );

        if ( objects.count() == 0 )
        {
            return null;
        }
        else
        {
            return objects.objectAtIndex(0);
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve a single object using a list of keys and values to match.
     *
     * @param context The editing context to use
     * @param keysAndValues a list of keys and values to match, alternating
     *     "key", "value", "key", "value"...
     *
     * @return the single entity that was retrieved, or null if there was none
     *
     * @throws EOUtilities.MoreThanOneException
     *     if there is more than one matching object
     */
    public static SheetEntry uniqueObjectMatchingValues(
        EOEditingContext context,
        Object... keysAndValues) throws EOUtilities.MoreThanOneException
    {
        if (keysAndValues.length % 2 != 0)
        {
            throw new IllegalArgumentException("There should a value "
                + "corresponding to every key that was passed. Args = "
                + java.util.Arrays.toString(keysAndValues));
        }

        NSMutableDictionary<String, Object> valueDictionary =
            new NSMutableDictionary<String, Object>();

        for (int i = 0; i < keysAndValues.length; i += 2)
        {
            Object key = keysAndValues[i];
            Object value = keysAndValues[i + 1];

            if (key == null)
            {
                throw new IllegalArgumentException(
                    "Found null where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }
            else if (!(key instanceof String))
            {
                throw new IllegalArgumentException(
                    "Found a " + key.getClass().getName() + " [" + key + "]"
                    + " where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }

            valueDictionary.setObjectForKey(value, key);
        }

        return uniqueObjectMatchingValues(context, valueDictionary);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve an object using a dictionary of keys and values to match.
     *
     * @param context The editing context to use
     * @param keysAndValues a dictionary of keys and values to match
     *
     * @return the single entity that was retrieved, or null if there was none
     *
     * @throws EOUtilities.MoreThanOneException
     *     if there is more than one matching object
     */
    public static SheetEntry uniqueObjectMatchingValues(
        EOEditingContext context,
        NSDictionary<String, Object> keysAndValues)
        throws EOUtilities.MoreThanOneException
    {
        try
        {
            return (SheetEntry)EOUtilities.objectMatchingValues(
                context, ENTITY_NAME, keysAndValues);
        }
        catch (EOObjectNotAvailableException e)
        {
            return null;
        }
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the count of all objects of this type.
     *
     * @param context The editing context to use
     *
     * @return the count of all objects
     */
    public static int countOfAllObjects(EOEditingContext context)
    {
        return countOfObjectsMatchingQualifier(context, null);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the count of objects that match a qualifier.
     *
     * @param context The editing context to use
     * @param qualifier The qualifier to use
     *
     * @return the count of objects matching the qualifier
     */
    public static int countOfObjectsMatchingQualifier(
        EOEditingContext context, EOQualifier qualifier)
    {
        return ERXEOControlUtilities.objectCountWithQualifier(
                context, ENTITY_NAME, qualifier);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the count of objects using a list of keys and values to match.
     *
     * @param context The editing context to use
     * @param keysAndValues a list of keys and values to match, alternating
     *     "key", "value", "key", "value"...
     *
     * @return the count of objects that match the specified values
     */
    public static int countOfObjectsMatchingValues(
        EOEditingContext context,
        Object... keysAndValues)
    {
        if (keysAndValues.length % 2 != 0)
        {
            throw new IllegalArgumentException("There should a value "
                + "corresponding to every key that was passed. Args = "
                + java.util.Arrays.toString(keysAndValues));
        }

        NSMutableDictionary<String, Object> valueDictionary =
            new NSMutableDictionary<String, Object>();

        for (int i = 0; i < keysAndValues.length; i += 2)
        {
            Object key = keysAndValues[i];
            Object value = keysAndValues[i + 1];

            if (key == null)
            {
                throw new IllegalArgumentException(
                    "Found null where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }
            else if (!(key instanceof String))
            {
                throw new IllegalArgumentException(
                    "Found a " + key.getClass().getName() + " [" + key + "]"
                    + " where a String key was expected, arguments = "
                    + java.util.Arrays.toString(keysAndValues));
            }

            valueDictionary.setObjectForKey(value, key);
        }

        return countOfObjectsMatchingValues(context, valueDictionary);
    }


    // ----------------------------------------------------------
    /**
     * Retrieve the count of objects using a dictionary of keys and values to
     * match.
     *
     * @param context The editing context to use
     * @param keysAndValues a dictionary of keys and values to match
     *
     * @return the count of objects that matched the specified values
     */
    public static int countOfObjectsMatchingValues(
        EOEditingContext context,
        NSDictionary<String, Object> keysAndValues)
    {
        return countOfObjectsMatchingQualifier(context,
                EOQualifier.qualifierToMatchAllValues(keysAndValues));
    }


    // ----------------------------------------------------------
    /**
     * Produce a string representation of this object.  This implementation
     * calls UserPresentableDescription(), which uses WebObjects' internal
     * mechanism to print out the visible fields of this object.  Normally,
     * subclasses would override userPresentableDescription() to change
     * the way the object is printed.
     *
     * @return A string representation of the object's value
     */
    public String toString()
    {
        return userPresentableDescription();
    }


    //~ Instance/static variables .............................................

    static Logger log = Logger.getLogger(SheetEntry.class);
}
